<div id="risk" class="grid-wrapper cat_1">
  <aside>
    {{risico-output risico=model.risico}}
    <section id="risk-legend">
      <ol>
        <li>Laag risico</li>
        <li>Middelmatig risico</li>
        <li>Hoog risico</li>
      </ol>
    </section>
    <section id="risk-completion">
      <ul>
        {{cat-completion id="kind-completion"}}
        {{cat-completion id="ouders-completion"}}
        {{cat-completion id="vader-completion"}}
        {{cat-completion id="moeder-completion"}}
        {{cat-completion id="overig-completion"}}
      </ul>
    </section>
    <footer id="risk-clear">
      <button id="clear" type="button" name="button">Clear all</button>
    </footer>
  </aside>
  <header id="risk-nav">
    <div>
      <h1>Kind</h1>
      <h1>Ouders</h1>
      <h1>Vader</h1>
      <h1>Moeder</h1>
      <h1>Overig</h1>
    </div>
    <div>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
      <span></span>
    </div>
    <button id="next" type="button" name="button">&#62;</button>
    <button id="back" type="button" name="button">&#60;</button>
  </header>
  <div id="disabler">
    <div id="loader_6" class="loader">
      <div></div>
      <div></div>
      <div></div>
      <div></div>
      <div></div>
    </div>
  </div>
  <main id="risk-forms">
    {{risico-formulier object=model.kind categorie="kind"}}
    {{risico-formulier object=model.ouders categorie="ouders"}}
    {{risico-formulier object=model.vader categorie="vader"}}
    {{risico-formulier object=model.moeder categorie="moeder"}}
    {{risico-formulier object=model.overig categorie="overig"}}
  </main>
</div>

<script type="text/javascript">
  let risk = document.getElementById('risk');
  let next = document.getElementById('next');
  let back = document.getElementById('back');
  let allInputs = document.querySelectorAll('.vraag .question');
  let allQuestions = document.querySelectorAll('.vraag > div')
  let output = document.getElementById('risk-output');
  let disabler = document.getElementById('disabler');
  let clearAll = document.getElementById('clear');
  let colorInd = document.getElementById('color-indicator');
  let completionPercentage = document.querySelector('#risk-completion > h2')
  let antwoorden = [];

  // Niet zo trots hierop ...
  next.addEventListener('click', () => {
    if (risk.classList.contains('cat_1')) {
      risk.classList.add('cat_2');
      risk.classList.remove('cat_1');
    } else if (risk.classList.contains('cat_2')) {
      risk.classList.add('cat_3');
      risk.classList.remove('cat_2');
    } else if (risk.classList.contains('cat_3')) {
      risk.classList.add('cat_4');
      risk.classList.remove('cat_3');
    } else if (risk.classList.contains('cat_4')) {
      risk.classList.add('cat_5');
      risk.classList.remove('cat_4');
    }
  })

  back.addEventListener('click', () => {
    if (risk.classList.contains('cat_5')) {
      risk.classList.add('cat_4');
      risk.classList.remove('cat_5');
    } else if (risk.classList.contains('cat_4')) {
      risk.classList.add('cat_3');
      risk.classList.remove('cat_4');
    } else if (risk.classList.contains('cat_3')) {
      risk.classList.add('cat_2');
      risk.classList.remove('cat_3');
    } else if (risk.classList.contains('cat_2')) {
      risk.classList.add('cat_1');
      risk.classList.remove('cat_2');
    }
  })



function displayStatus(data) {
  if (data) {
    let cats = Object.keys(data);

    cats.forEach((cat) => {
      let displayPercentage = document.querySelector(`#${cat}-completion .percentage`);
      displayPercentage.textContent = `${data[cat].perc()}%`;

      let percentageIndicator = document.querySelector(`#${cat}-completion .indicator span`);
      percentageIndicator.style.width = `${data[cat].perc()}%`;

    })
  } else {
    document.querySelectorAll('#risk-completion ul li').forEach((li) => {
      let displayPercentage = li.querySelector('.percentage');
      displayPercentage.textContent = '0%';

      let percentageIndicator = li.querySelector('.indicator > span');
      percentageIndicator.style.width = '0%';

    })
  }
}

function checkCompletion() {
  // let totalQuestions = allQuestions.length;

  // Should have used a constructor
  let totalQuestions = {
    kind: {
      answered: [],
      total: [],
      perc: function() {
        return (this.answered.length / this.total.length * 100).toFixed(0);
      }
    },
    ouders: {
      answered: [],
      total: [],
      perc: function() {
        return (this.answered.length / this.total.length * 100).toFixed(0);
      }
    },
    vader: {
      answered: [],
      total: [],
      perc: function() {
        return (this.answered.length / this.total.length * 100).toFixed(0);
      }
    },
    moeder: {
      answered: [],
      total: [],
      perc: function() {
        return (this.answered.length / this.total.length * 100).toFixed(0);
      }
    },
    overig: {
      answered: [],
      total: [],
      perc: function() {
        return (this.answered.length / this.total.length * 100).toFixed(0);
      }
    }
  }
  // let totalCheckedInputs = [];

  allQuestions.forEach((question) => {

    totalQuestions[question.classList[0]].total.push(question);

    let inputs = question.getElementsByClassName('question');
    // if (inputs[0].nodeName == 'SELECT' && inputs[0].value !== 'null') {
    //   totalQuestions[question.classList[0]].answered.push(question)
    // } else if (inputs[0].checked || inputs[1].checked) {
    //   totalQuestions[question.classList[0]].answered.push(question)
    // }

    if (inputs[0].nodeName == 'SELECT') {
      if (inputs[0].value !== 'null') {
        totalQuestions[question.classList[0]].answered.push(question);
      }
    } else if (inputs.length == 2 && (inputs[0].checked || inputs[1].checked)) {
      totalQuestions[question.classList[0]].answered.push(question);
    } else if (inputs[0].checked) {
      totalQuestions[question.classList[0]].answered.push(question);
    }

    // if (inputs[0].checked || inputs[1].checked || (inputs[0].nodeName == 'SELECT' && inputs[0].value !== 'null')) {
    //
    // }
    // inputs.forEach((input) => {
    //   console.log(input)
    // })
    // if (question.checked || (question.nodeName == 'SELECT' && question.value !== 'null')) {
    //   console.log(input.classList)
    //   totalCheckedInputs.push(input.name)
    // }

  })
  // console.log(totalQuestions)
  // completionPercentage.textContent = `${ ( totalAnswered.length / totalQuestions * 100 ).toFixed(0) }%`
  displayStatus(totalQuestions)
}

// checkCompletion();

// Save all the localstorage data in antwoorden
(function(){
  colorInd.style.backgroundColor = `rgba(255, ${255 - (((Number(output.textContent) * 10) / 2) ).toFixed(0)}, 0)`

  allInputs.forEach((input) => {
    if (input.checked || (input.nodeName == 'SELECT' && input.value !== 'null')) {
      antwoorden.push({
        naam: input.name.replace(' ', '_'),
        gewicht: Number(input.value)
      })
    }
  })
  calcRisc();
})();

  function calcRisc() {
    checkCompletion();
    let lineup = [];

    disabler.classList.add('tempDisable');

    antwoorden.forEach((val) => {
      lineup.push(val.gewicht);
    })
    let totaal = lineup.reduce((a, b) => a + b, 0);

    // Calculate the risk
    let risico = Number( ( 1 / ( 1 + Math.exp( -1 * ( -8.57219 + totaal ) ) ) * 10000 ).toFixed(2));

    localStorage.setItem('risico', risico);
    let condition = Number(output.textContent) > risico;

    if (Number(output.textContent) !== risico) {

      risk.classList.add('calculating')

      let newRisc = setInterval(() => {
          if (condition === false) {
              output.textContent = (Number(output.textContent) + 0.01).toFixed(2);
          }

          if (condition === true) {
            output.textContent = (Number(output.textContent) - 0.01).toFixed(2);
          }

          // Change color indicator based on the risc
          colorInd.style.backgroundColor = `rgba(255, ${255 - (((Number(output.textContent) * 10) / 2) ).toFixed(0)}, 0)`

          if (Number(output.textContent) === risico) {
            clearInterval(newRisc)
            // disabler.classList.remove('tempDisable');
            risk.classList.remove('calculating')
          }

      }, 0.1)
    } else {
      // output.classList.remove('calculating')
      // disabler.classList.remove('tempDisable');
      risk.classList.remove('calculating')
    }
  }

  function fillArray(e) {
    let name = e.target.name.replace(' ', '_');
    let gewicht = Number(e.target.value);

    if (antwoorden.length) {
      antwoorden.forEach((antwoord) => {
        let i = antwoorden.indexOf(antwoord);
        if (antwoord.naam === name) {
          antwoorden.splice(i, 1);
          antwoorden.push({
            naam: name,
            gewicht: gewicht
          })
          // Wacht tot the forEach loop bij de laatste is
        } else if (i === antwoorden.length - 1 && antwoord.naam !== name) {
          antwoorden.push({
            naam: name,
            gewicht: gewicht
          })
        }
      })
    } else {
      antwoorden.push({
        naam: e.target.name.replace(' ', '_'),
        gewicht: Number(e.target.value)
      })
    }
    calcRisc();
  }
    allInputs.forEach((input) => {
      input.addEventListener('change', fillArray);
    })

    clear.addEventListener('click', () => {
      colorInd.style.backgroundColor = 'yellow'
      localStorage.clear();
      output.textContent = 0;
      antwoorden = [];
      displayStatus(null);
      allInputs.forEach((input) => {
          input.checked = false;
          if (input.nodeName == 'SELECT') {
            input.selectedIndex = 0;
          }

      })
    });

</script>
